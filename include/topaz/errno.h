#ifndef TOPAZ_ERRNO_H
#define TOPAZ_ERRNO_H

/*
 * Topaz - Error Numbers / Ids
 *
 * This file implements known error codes, as used by the topaz library.
 *
 * Copyright (c) 2016, T Parys
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** General topaz error number of type uint32_t */
typedef enum
{
/* === BEGIN AUTOGENERATED CONTENT === */

  /** No error reported */
  TP_ERR_SUCCESS         = 0x00000000,

  /** Feature not yet implemented */
  TP_ERR_UNIMPLEMENTED   = 0x00000001,

  /** Error opening file */
  TP_ERR_OPEN            = 0x00000002,

  /** Error opening file */
  TP_ERR_CLOSE           = 0x00000003,

  /** Invalid argument */
  TP_ERR_INVALID         = 0x00000004,

  /** NULL Pointer */
  TP_ERR_NULL            = 0x00000005,

  /** Error allocating memory */
  TP_ERR_ALLOC           = 0x00000006,

  /** Insufficient space for requested operation */
  TP_ERR_SPACE           = 0x00000007,

/* SWG Binary Syntax Errors */

  /** Unexpected token in binary syntax */
  TP_ERR_SYNTAX          = 0x00010000,

  /** Wrong datatype in parsing stream */
  TP_ERR_DATATYPE        = 0x00010001,

  /** No valid representation for data */
  TP_ERR_REPRESENT       = 0x00010002,

  /** Unexpected end of data buffer */
  TP_ERR_BUFFER_END      = 0x00010003,

/* TPM Errors */

  /** Target drive does not contain a TPM */
  TP_ERR_NO_TPM          = 0x00020000,

  /** TPM does not support a known protocol */
  TP_ERR_TPM_PROTO       = 0x00020001,

  /** TPM using an unknown protocol version */
  TP_ERR_TPM_VERSION     = 0x00020002,

  /** Unrecognized SSC messaging type */
  TP_ERR_NO_SSC          = 0x00020003,

  /** Cannot reset specified ComID */
  TP_ERR_COMID_RESET     = 0x00020004,

  /** Unexpected ComID in TPM response */
  TP_ERR_BAD_COMID       = 0x00020005,

  /** Timeout waiting for TPM response */
  TP_ERR_TIMEOUT         = 0x00020006,

  /** Bad / Malformed response from TPM */
  TP_ERR_MALFORMED       = 0x00020007,

/* SWG Method Call Statuses */

  /** Call Failure - Success */
  TP_ERR_CALL_SUCCESS    = 0x00030000,

  /** Call Failure - Not Authorized */
  TP_ERR_CALL_NOT_AUTHORIZED = 0x00030001,

  /** Call Failure - Read Only */
  TP_ERR_CALL_READ_ONLY  = 0x00030002,

  /** Call Failure - SP Busy */
  TP_ERR_CALL_SP_BUSY    = 0x00030003,

  /** Call Failure - SP Failed */
  TP_ERR_CALL_SP_FAILED  = 0x00030004,

  /** Call Failure - SP Disabled */
  TP_ERR_CALL_SP_DISABLED = 0x00030005,

  /** Call Failure - SP Frozen */
  TP_ERR_CALL_SP_FROZEN  = 0x00030006,

  /** Call Failure - No Sessions Available */
  TP_ERR_CALL_NO_SESSIONS_AVAILABLE = 0x00030007,

  /** Call Failure - Index Conflict */
  TP_ERR_CALL_INDEX_CONFLICT = 0x00030008,

  /** Call Failure - Insufficient Space */
  TP_ERR_CALL_INSUFFICIENT_SPACE = 0x00030009,

  /** Call Failure - Insufficient Rows */
  TP_ERR_CALL_INSUFFICIENT_ROWS = 0x0003000a,

  /** Call Failure - Invalid Command */
  TP_ERR_CALL_INVALID_COMMAND = 0x0003000b,

  /** Call Failure - Invalid Parameter */
  TP_ERR_CALL_INVALID_PARAMETER = 0x0003000c,

  /** Call Failure - Invalid SECMSG Properties */
  TP_ERR_CALL_INVALID_SECMSG_PROPERTIES = 0x0003000d,

  /** Call Failure - TPer Malfunction */
  TP_ERR_CALL_TPER_MALFUNCTION = 0x0003000e,

  /** Call Failure - Transaction Failure */
  TP_ERR_CALL_TRANSATION_FAILURE = 0x0003000f,

  /** Call Failure - Response Overflow */
  TP_ERR_CALL_RESPONSE_OVERFLOW = 0x00030010,

  /** Call Failure - Authority Locked Out */
  TP_ERR_CALL_AUTHORITY_LOCKED_OUT = 0x00030011,

/* Tranport Errors */

  /** Failed to call ioctl */
  TP_ERR_IOCTL           = 0x00040000,

  /** Bad sense data */
  TP_ERR_SENSE           = 0x00040001,

  /** Packet too large for drive */
  TP_ERR_PACKET_SIZE     = 0x00040002,

/* Linux Specific Errors */

  /** Error reading from sysfs */
  TP_ERR_SYSFS           = 0x00050000,

  /** Libata blocking TPM calls (add kernel argument 'libata.allow_tpm=1') */
  TP_ERR_LIBATA          = 0x00050001,


/* === END AUTOGENERATED CONTENT === */
} tp_errno_t;

/** Last topaz error number */
tp_errno_t tp_errno;

/**
 * \brief Error Number String Lookup (Current)
 *
 * Returns a human readable interpretation of the current Topaz error code
 *
 * \param[in] id Valid error identifier
 * \return Pointer to static buffer containing error message
 */
char const *tp_errno_lookup_cur();

/**
 * \brief Error Number String Lookup (Arbitrary)
 *
 * Returns a human readable interpretation of a arbitrary Topaz error code
 *
 * \param[in] id Valid error identifier
 * \return Pointer to static buffer containing error message
 */
char const *tp_errno_lookup(tp_errno_t id);

#endif
