#!/usr/bin/python3

category_mult = 0x1000
errno_ids = []
errno_next = 0

# Parse input file
handle = open('errno_input.txt')
for line in handle.readlines():

    # Next category?
    if '@' in line:
        errno_ids.append(line.split('@')[1].strip())

        # Advance to next multiple - in a super lazy way
        while errno_next % category_mult != 0:
            errno_next += 1
        
    # Next errno?
    elif ':' in line:
        name, text = [x.strip() for x in line.split(':')]
        errno_ids.append((name.upper(), errno_next, text))
        errno_next += 1

# Autogenerate handler
def autogen(filename, cat_func, errno_func):
    
    # Scan in input file
    sections = [[]]
    handle = open(filename)
    for line in handle.readlines():
        if 'AUTOGENERATED CONTENT' in line:
            sections.append([])
        else:
            sections[-1].append(line)
            
    # Sanity check
    if len(sections) != 3:
        raise Exception('Cannot locate autogenerated content')

    # Dump output file
    handle = open(filename, 'w')

    # Dump header
    for line in sections[0]:
        handle.write(line)
        
    # Separator
    handle.write("/* === BEGIN AUTOGENERATED CONTENT === */\n\n")

    # Dump
    for item in errno_ids:
        if type(item) == str:
            handle.write(cat_func(item))
        else:
            handle.write(errno_func(item))
            
    # Separator
    handle.write("\n/* === END AUTOGENERATED CONTENT === */\n")

    # Dump footer
    for line in sections[2]:
        handle.write(line)

# Autogenerate header file
autogen('../../include/topaz/errno.h',
        lambda x: '\n/* %s */\n\n' % x,
        lambda x: '#define TP_ERR_%-15s 0x%08x /** %s */\n' % x)

# Autogenerate C data structures
autogen('../../src/topaz/errno.c',
        lambda x: '\n  /* %s */\n\n' % x,
        lambda x: '  /* TP_ERR_%-15s */ { 0x%08x, "%s" },\n' % x)
